# GUI functions and classes
# This module contains all the code nessesary to handle the gui and the logic behind it.
# Some separate parts of this file were generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
# The rest of the code was written by Joriam van Slooten
# Email: joriam.vanslooten@student.hu.nl
# Github:https://github.com/JoriamVS/Stationszuil

import tkinter as tk
from tkinter import Canvas, Entry, Button, PhotoImage, ttk, Frame
import modules
from pathlib import Path
import openweather
import csv
import re

# Constants for path functions
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r'assets')

# Constants for window position and size
SCREENRESOLUTION_X = 1920
SCREENRESOLUTION_Y = 1080
WINDOWPOSITION_X = (SCREENRESOLUTION_X / 2) - (1440 / 2)
WINDOWPOSITION_Y = (SCREENRESOLUTION_Y / 2) - (924 / 1) + 425

# Constants for better code readability
BTN_ZUIL = 1
BTN_MODERATOR = 2
STATION_AMERSFOORT = 3
STATION_DENBOSCH = 4
STATION_UTRECHT = 5
WINDOW_OPENING = 6
WINDOW_ZUIL = 7
WINDOW_MODERATOR = 8
WINDOW_STATIONSHAL = 9


# This function was generated by Tkinter designer: See comments at top of file
# This function takes a file name and pastes the directory of the 'assets' folder in front.
def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


# This class handles the graphics that are standard across all the windows
class StdGraphics:

    def __init__(self, master):
        super().__init__()  # This statement calls the __init__ of tk.Tk()
        self.master = master

        return self

    # This function calls the opening window on click and destroys the current window
    def home_button(self):
        self.master.destroy()
        self.master = tk.Tk()
        self.app = Opening(self.master)

    # This function draws all the graphics and returns the canvas on which this was done.
    def draw(self):
        # Destroy title bar, set spawn position
        self.master.overrideredirect(True)
        self.master.geometry('%dx%d+%d+%d' % (1440, 924, WINDOWPOSITION_X, WINDOWPOSITION_Y))

        # Configure canvas
        canvas = Canvas(
            self.master,
            bg="#E6E6E9",
            height=924,
            width=1440,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        # Set the yellow banner at the top of the window
        canvas.place(x=0, y=0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1440.0,
            185.0,
            fill="#FFC917",
            outline="")

        # Create logo text
        canvas.create_text(
            271.0,
            63.0,
            anchor="nw",
            text="Project: Stationszuil",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Create responsive NS image at the top
        self.image_image_NS = PhotoImage(
            file=relative_to_assets("image_NS.png"))
        button_image_NS = Button(
            image=self.image_image_NS,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: StdGraphics.home_button(self),
            relief="flat"
        )
        button_image_NS.place(
            x=82.0,
            y=58.0,
            width=181.0,
            height=67.0
        )

        # Create responsive close button in the top right corner
        self.image_image_close = PhotoImage(
            file=relative_to_assets("button_close.png")
        )
        close_button = Button(
            image=self.image_image_close,
            command=lambda: self.master.destroy(),
            borderwidth=0,
            highlightthickness=0,
            relief="flat"
        )
        close_button.place(
            x=1390.0,
            y=0.0,
            width=50.0,
            height=50.0
        )

        return canvas


# This class was used for testing purposes and shall remain here for it. Code in here is not important and should be ignored as it is not called
class TestGraphics:
    def __init__(self, master):
        super().__init__() # This statement calls the __init__ of tk.Tk()
        self.master = master

        # Draw graphics and set canvas
        canvas = StdGraphics.draw(self, WINDOW_STATIONSHAL, STATION_DENBOSCH)

        canvas.place(x=0, y=0)
        canvas.create_text(
            419.0,
            308.0,
            anchor="nw",
            text="Welke ervaring wilt u simuleren?",
            fill="#000000",
            font=("Public Sans", 40 * -1)
        )


# This class sets a default format for a 'stationshal' message
class Message:
    # Lists to save facility icons, without this the facility icons get removed when a new message is created
    imgs_toilet = []
    imgs_bike = []
    imgs_pr = []
    imgs_lift = []

    def __init__(self, master):
        super.__init__()  # This statement calls the __init__ of tk.Tk()
        self.master = master


    # This function places facility icons according to a given position and station
    def faciliteiten(self, msg_station, xCoord, yCoord, canvas):

        # Adjust positions a little because then they look beter, integer after the + signs are the amount of pixels
        yCoord = yCoord + 8
        xCoord = xCoord + 30

        # Read database for facility status of the given station
        checkToilet = modules.readDatabaseStation('toilet', msg_station)
        checkBike = modules.readDatabaseStation('ov_bike', msg_station)
        checkPR = modules.readDatabaseStation('park_and_ride', msg_station)
        checkLift = modules.readDatabaseStation('elevator', msg_station)

        # Spawn a toilet icon if the station has it
        if checkToilet[0][0] != 0:
            self.image_image_toilet = PhotoImage(
                file=relative_to_assets("image_toilet_s.png"))
            image_toilet = canvas.create_image(
                xCoord,
                yCoord,
                image=self.image_image_toilet
            )
            # Append icon to toilet list to avoid deletion
            Message.imgs_toilet.append(self.image_image_toilet)

        # Spawn a bike icon if the station has it
        if checkBike[0][0] != 0:
            self.image_image_bike = PhotoImage(
                file=relative_to_assets("image_bike_s.png"))
            image_bike = canvas.create_image(
                # Image spacing is 53px on the x-axis, each object is 53px further away
                xCoord + 53,
                yCoord,
                image=self.image_image_bike
            )
            # Append icon to the bike list to avoid deletion
            Message.imgs_bike.append(self.image_image_bike)

        # Spawn a pr icon if the station has it
        if checkPR[0][0] != 0:
            self.image_image_pr = PhotoImage(
                file=relative_to_assets("image_pr_s.png"))
            image_pr = canvas.create_image(
                xCoord + 106,
                yCoord,
                image=self.image_image_pr
            )
            # Append icon to the pr list to avoid deletion
            Message.imgs_pr.append(self.image_image_pr)

        # Spawn a lift icon if the station has it
        if checkLift[0][0] != 0:
            self.image_image_lift = PhotoImage(
                file=relative_to_assets("image_lift_s.png"))
            image_lift = canvas.create_image(
                xCoord + 159,
                yCoord,
                image=self.image_image_lift
            )
            # Append icon to the lift list to avoid deletion
            Message.imgs_lift.append(self.image_image_lift)

    # This function places a message on the canvas with the given details
    def placeMessage(self, yCoord, message, name, msg_station, canvas):
        # Place the name 32 pixels below the message
        yCoord_name = yCoord + 32

        # Spawn the message in quotes
        canvas.create_text(
            81.0,
            yCoord,
            anchor="nw",
            text=f'\"{message}\"',
            fill="#000000",
            font=("Public Sans", 20 * -1)
        )

        # Spawn the corresponding name and station
        msg_info = canvas.create_text(
            81.0,
            yCoord_name,  # The difference in Y is Y + 32
            anchor="nw",
            text=f"~ {name} over {msg_station}",
            fill="#000000",
            font=("Public Sans", 20 * -1)
        )

        # Get the bounds of the msg_info to see where to spawn facility icons
        bounds = canvas.bbox(msg_info)
        # Set the facility x coordinate to the end of msg_info
        facility_x = bounds[2]

        # Spawn facilities
        Message.faciliteiten(self, msg_station, facility_x, yCoord_name, canvas)


# This class spawns the first window where a user can select their experience
class Opening:
    def __init__(self, master):
        super().__init__()  # This statement calls the __init__ of tk.Tk()
        self.master = master

        # Draw graphics and set canvas
        canvas = StdGraphics.draw(self)
        canvas.place(x=0, y=0)

        # Spawn text
        canvas.create_text(
            419.0,
            308.0,
            anchor="nw",
            text="Welke ervaring wilt u simuleren?",
            fill="#000000",
            font=("Public Sans", 40 * -1)
        )

        # Spawn button to display 'Zuil' button
        self.button_image_zuil = PhotoImage(
            file=relative_to_assets("button_zuil.png"))

        button_zuil = Button(
            image=self.button_image_zuil,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.new_window(BTN_ZUIL),  # Open Zuil window on click
            relief="flat"
        )
        button_zuil.place(
            x=64.0,
            y=544.0,
            width=355.0,
            height=106.0
        )

        # Spawn button to display 'Station Amersfoort' button
        self.button_image_station_amersfoort = PhotoImage(
            file=relative_to_assets("button_station_amersfoort.png"))

        button_station_amersfoort = Button(
            image=self.button_image_station_amersfoort,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.new_window(STATION_AMERSFOORT),  # Open Station Amersfoort window on click
            relief="flat"
        )
        button_station_amersfoort.place(
            x=467.0,
            y=411.0,
            width=505.0,
            height=106.0
        )

        # Spawn button to display 'Station Den Bosch' button
        self.button_image_station_denbosch = PhotoImage(
            file=relative_to_assets("button_station_denbosch.png"))

        button_station_denbosch = Button(
            image=self.button_image_station_denbosch,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.new_window(STATION_DENBOSCH),  # Open Station Den Bosch window on click
            relief="flat"
        )
        button_station_denbosch.place(
            x=467.0,
            y=544.0,
            width=505.0,
            height=106.0
        )

        # Spawn button to display 'Station Utrecht' button
        self.button_image_station_utrecht = PhotoImage(
            file=relative_to_assets("button_station_utrecht.png"))

        button_station_utrecht = Button(
            image=self.button_image_station_utrecht,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.new_window(STATION_UTRECHT),  # Open Station Utrecht window on click
            relief="flat"
        )
        button_station_utrecht.place(
            x=467.0,
            y=677.0,
            width=505.0,
            height=106.0
        )

        # Spawn button to display 'Moderator' button
        self.button_image_moderator = PhotoImage(
            file=relative_to_assets("button_moderator.png"))

        button_moderator = Button(
            image=self.button_image_moderator,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.new_window(BTN_MODERATOR),  # Open Moderator window on click
            relief="flat"
        )
        button_moderator.place(
            x=1020.0,
            y=544.0,
            width=355.0,
            height=106.0
        )

    # This function opens a new window when called, the specific window is determined by the parameter 'button'
    def new_window(self, button):
        # Destroy current window
        self.master.destroy()
        self.master = tk.Tk()

        # Determine what window to open
        if button == BTN_ZUIL:
            self.app = Zuil(self.master)
        elif button == BTN_MODERATOR:
            self.app = ModeratorData(self.master)
        elif button == STATION_AMERSFOORT:
            self.app = Stationshalscherm(self.master, STATION_AMERSFOORT)
        elif button == STATION_DENBOSCH:
            self.app = Stationshalscherm(self.master, STATION_DENBOSCH)
        elif button == STATION_UTRECHT:
            self.app = Stationshalscherm(self.master, STATION_UTRECHT)

        self.master.mainloop()


# This class spawns the window where a user can leave a message
class Zuil:
    def __init__(self, master):
        super().__init__()  # This statement calls the __init__ of tk.Tk()
        self.master = master
        # Draw graphics and set canvas
        canvas = StdGraphics.draw(self)

        # Get a random station to pass along with the message
        self.station = modules.rand_station()

        # This function checks if a name + message were given and parses this if data is valid
        def checkData(canvas):
            # This function opens a new instance of class Zuil and destroys the current one when called
            def refresh_window():
                self.master.destroy()
                self.master = tk.Tk()
                self.app = Zuil(self.master)

            # Set some string variables for readability
            too_long = 'Your message was too long, a maximum of 140 characters is allowed. Please try again'
            no_message = 'Please don\'t forget entering a message'

            # Get the data from entry fields
            message = entry_message.get()
            naam = entry_naam.get()

            # Set name to 'Anoniem' if left blank
            if naam == '':
                naam = 'Anoniem'

            # Check if a message was given, if not print an error message for the user
            if message != '':
                # Delete message and print an error message to the user if the message is too long
                if len(message) > 140:
                    entry_message.delete(0, tk.END)
                    canvas.create_text(
                        81.0,
                        740.0,
                        anchor="nw",
                        text=too_long,
                        fill="#DB0029",
                        font=("Public Sans", 30 * -1)
                    )
                # If everything went right, give data to parseData and refresh the window
                else:
                    userList = [message, naam]
                    modules.parseData(userList, self.station)
                    refresh_window()
            else:
                canvas.create_text(
                    81.0,
                    740.0,
                    anchor="nw",
                    text=no_message,
                    fill="#DB0029",
                    font=("Public Sans", 30 * -1)
                )

        # Spawn button to display 'verzend' button
        self.button_image_verzend = PhotoImage(
            file=relative_to_assets("button_verzend.png"))

        button_verzend = Button(
            image=self.button_image_verzend,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: checkData(canvas), # Call checkdata on click
            relief="flat"
        )
        button_verzend.place(
            x=81.0,
            y=784.0,
            width=428.0,
            height=99.0
        )

        # Spawn text
        canvas.create_text(
            81.0,
            207.0,
            anchor="nw",
            text="Voer uw naam in:",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn text
        canvas.create_text(
            81.0,
            368.0,
            anchor="nw",
            text="Voer uw bericht in:",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn entry field for name
        self.entry_image_naam = PhotoImage(
            file=relative_to_assets("entry_1.png"))

        entry_bg_naam = canvas.create_image(
            295.0,
            320.0,
            image=self.entry_image_naam
        )
        entry_naam = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#003082",
            highlightthickness=0,
            font=("Public Sans", 25 * -1)
        )
        entry_naam.place(
            x=91.0,
            y=300.0,
            width=408.0,
            height=40.0
        )

        # Spawn entry field for message
        self.entry_image_message = PhotoImage(
            file=relative_to_assets("entry_2.png"))

        entry_bg_2 = canvas.create_image(
            601.0,
            585.5,
            image=self.entry_image_message
        )
        entry_message = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#003082",
            highlightthickness=0,
            font=("Public Sans", 25 * -1),
        )
        entry_message.place(
            x=91.0,
            y=460.0,
            width=1020.0,
            height=40.0
        )


# This class spawns the moderater window where a message can be judged
class Moderator:
    def __init__(self, master, name, mail):
        super().__init__()  # This statement calls the __init__ of tk.Tk()
        self.master = master
        self.name = name
        self.mail = mail

        # This function writes message status to database and opens a new instance of Moderrator and destroys the current one
        def refresh_window(approval):
            modules.gui_moderateMessage(to_moderate, name, mail, approval)
            self.master.destroy()
            self.master = tk.Tk()
            self.app = Moderator(self.master, name, mail)

        # Draw graphics and set canvas
        canvas = StdGraphics.draw(self)

        # Get the oldest message and define message and username
        to_moderate = modules.getOldestFile()
        plainMessage = ''
        username = ''

        # Check if there are any files left to moderate
        if not to_moderate:
            plainMessage = "Er zijn helaas geen berichten meer over, kijk later nog een keer."
        else:
            # Open file and extract message and userrname
            with open(to_moderate, 'r', newline='') as file:
                csvRead = csv.DictReader(file)
                for row in csvRead:
                    plainMessage = row['Message']
                    username = f"~ {row['Username']}"

            # Spawn button to display 'Afkeuren' button
            self.button_image_afkeuren = PhotoImage(
                file=relative_to_assets("button_afkeuren.png"))

            button_afkeuren = Button(
                image=self.button_image_afkeuren,
                borderwidth=0,
                highlightthickness=0,
                command=lambda: refresh_window(False),  # Call refresh_window on click and don't approve message
                relief="flat"
            )
            button_afkeuren.place(
                x=673.0,
                y=784.0,
                width=448.0,
                height=99.0
            )

            # Spawn button to display 'Goedkeuren' button
            self.button_image_goedkeuren = PhotoImage(
                file=relative_to_assets("button_goedkeuren.png"))
            button_goedkeuren = Button(
                image=self.button_image_goedkeuren,
                borderwidth=0,
                highlightthickness=0,
                command=lambda: refresh_window(True),  # Call refresh_window on click and approve message
                relief="flat"
            )
            button_goedkeuren.place(
                x=81.0,
                y=784.0,
                width=503.0,
                height=99.0
            )

        # Spawn text
        canvas.create_text(
            81.0,
            207.0,
            anchor="nw",
            text="Uw naam:",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn text
        canvas.create_text(
            694.0,
            207.0,
            anchor="nw",
            text="Uw e-mail:",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn text
        canvas.create_text(
            81.0,
            368.0,
            anchor="nw",
            text="Het goed te keuren bericht:",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn image for moderator name
        self.image_naam = PhotoImage(
            file=relative_to_assets("entry_1.png"))

        bg_naam = canvas.create_image(
            295.0,
            324.0,
            image=self.image_naam
        )

        # Spawn text with moderator name
        canvas.create_text(
            90.0,
            310.0,
            anchor="nw",
            text=name,
            fill="#003082",
            font=("Public Sans", 25 * -1)
        )

        # Spawn image for moderator mail
        self.entry_image_mail = PhotoImage(
            file=relative_to_assets("entry_1.png"))

        entry_bg_mail = canvas.create_image(
            907.0,
            324.0,
            image=self.entry_image_mail
        )

        # Spawn text with moderator mail
        canvas.create_text(
            703.0,
            310.0,
            anchor="nw",
            text=self.mail,
            fill="#003082",
            font=("Public Sans", 25 * -1)
        )

        # Spawn image for message
        self.image_message = PhotoImage(
            file=relative_to_assets("image_message.png"))

        place_image_message = canvas.create_image(
            601.0,
            585.0,
            image=self.image_message
        )

        # Spawn text with message
        canvas.create_text(
            90.0,
            470.0,
            anchor="nw",
            text=plainMessage,
            fill="#003082",
            font=("Public Sans", 25 * -1)
        )

        # Spawn text with username
        canvas.create_text(
            90.0,
            510.0,
            anchor="nw",
            text=username,
            fill="#003082",
            font=("Public Sans", 25 * -1)
        )

# This class spawns the window between 'Opening' and 'Moderator' to make sure the moderator only has to log in once.
class ModeratorData:
    def __init__(self, master):
        super().__init__()  # This statement calls the __init__ of tk.Tk()
        self.master = master

        # Draw graphics and set canvas
        canvas = StdGraphics.draw(self)

        # Spawn text
        canvas.create_text(
            563.0,
            256.0,
            anchor="nw",
            text="Voer uw naam in:",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn text
        canvas.create_text(
            556.0,
            424.0,
            anchor="nw",
            text="Voer uw e-mail in:",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn entry field for name
        self.entry_image_naam = PhotoImage(
            file=relative_to_assets("entry_1.png"))

        entry_bg_naam = canvas.create_image(
            720.0,
            369.0,
            image=self.entry_image_naam
        )

        entry_naam = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#003082",
            highlightthickness=0,
            font=("Public Sans", 25 * -1)
        )
        entry_naam.place(
            x=516.0,
            y=347.0,
            width=408.0,
            height=40.0
        )

        # Spawn entry field for e-mail
        self.entry_image_mail = PhotoImage(
            file=relative_to_assets("entry_1.png"))

        entry_bg_mail = canvas.create_image(
            720.0,
            542.0,
            image=self.entry_image_mail,
        )
        entry_mail = Entry(
            bd=0,
            bg="#FFFFFF",
            fg="#003082",
            highlightthickness=0,
            font=("Public Sans", 25 * -1)
        )
        entry_mail.place(
            x=516.0,
            y=520.0,
            width=408.0,
            height=40.0
        )

        # Spawn button to display 'verzend' button
        self.button_image_verzend = PhotoImage(
            file=relative_to_assets("button_verzend.png"))

        button_verzend = Button(
            image=self.button_image_verzend,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.check_data(self.master, entry_naam.get(), entry_mail.get(), canvas),  # call checkdata on click
            relief="flat"
        )
        button_verzend.place(
            x=506.0,
            y=751.0,
            width=428.0,
            height=99.0
        )

    # This function opens an instance of the Moderator class and destroys the current one
    def open_moderator(self, master, name, mail):
        self.master.destroy()
        self.master = tk.Tk()
        self.app = Moderator(self.master, name, mail)

    # This function validates the data and if valid calls open_moderator
    def check_data(self, master, name, mail, canvas):
        # This function checks if the mail entered is a valid mail adress. Returns True or False
        def check_mail(mail):
            regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
            if re.fullmatch(regex, mail):
                return True
            return False

        invalid_mail = "You entered an invalid e-mail"
        no_name = "Please don't forget to enter a name"

        # Check if a name and mail were entered
        if name != '' and check_mail(mail):
            self.open_moderator(self.master, name, mail)
        else:
            # Print corresponding error message if no name was entered
            if name == '':
                canvas.create_text(
                    500.0,
                    630.0,
                    anchor="nw",
                    text=no_name,
                    fill="#DB0029",
                    font=("Public Sans", 30 * -1)
                )
            # Print corresponding error message if mail was not valid
            if not check_mail(mail):
                canvas.create_text(
                    520.0,
                    680.0,
                    anchor="nw",
                    text=invalid_mail,
                    fill="#DB0029",
                    font=("Public Sans", 30 * -1)
                )


# This class spawns the window where all the approved messages get shown with weather data attached
class Stationshalscherm:
    def __init__(self, master, station):
        super().__init__()  # This statement calls the __init__ of tk.Tk()
        self.master = master

        # This function gets the weather data and shows it on screen
        def weerbericht():
            weer_strStation = self.strStation
            # Because Den Bosch and 's-Hertogenbosch get different results from the API we force 's-Hertogenbosch
            if weer_strStation == 'Den Bosch':
                weer_strStation = '\'s-Hertogenbosch'

            # Get weather data
            weatherData = openweather.getWeather(weer_strStation)

            # Spawn greyish rectangle where everything will be placed
            canvas.create_rectangle(
                0.0,
                674.0,
                1440.0,
                924.0,
                fill="#D9D9D9",
                outline="")

            # Spawn yellow rectangle where weather logo will be placed
            canvas.create_rectangle(
                70.0,
                690.0,
                440.0,
                900.0,
                fill='#FFC917',
                outline='')

            # Spawn weather logo
            self.image_image_weather = PhotoImage(
                file=relative_to_assets("image_weather.png"))
            image_weather = canvas.create_image(
                245.0,
                860.0,
                image=self.image_image_weather
            )

            # Spawn header text
            canvas.create_text(
                81.0,
                700.0,
                anchor="nw",
                text=f"Weerbericht {weer_strStation}",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn humidity pre-text
            canvas.create_text(
                450.0,
                747.0,
                anchor="nw",
                text="Luchtvochtigheid: ",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn forecast pre-text
            canvas.create_text(
                450.0,
                833.0,
                anchor="nw",
                text="Verwachte weersomstandigheden: ",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn air pressure pre-text
            canvas.create_text(
                450.0,
                790.0,
                anchor="nw",
                text="Luchtdruk: ",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn temperature pre-text
            canvas.create_text(
                450.0,
                704.0,
                anchor="nw",
                text="Het is op het moment:",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn air pressure text
            canvas.create_text(
                1036.0,
                790.0,
                anchor="nw",
                text=f"{weatherData[2]} hPa",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn humidity text
            canvas.create_text(
                1036.0,
                747.0,
                anchor="nw",
                text=f"{weatherData[1]}%",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn forecast text
            canvas.create_text(
                1036.0,
                833.0,
                anchor="nw",
                text=weatherData[3],
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

            # Spawn temperature text
            canvas.create_text(
                1036.0,
                704.0,
                anchor="nw",
                text=f"{weatherData[0]}° Celcius",
                fill="#003082",
                font=("Public Sans", 32 * -1)
            )

        # Draw graphics and set canvas
        canvas = StdGraphics.draw(self)

        # Define Y coordinates for the messages
        messageLocations = [281.0, 356.0, 431.0, 506.0, 581.0]

        # convert station constant to a usable string
        if station == STATION_AMERSFOORT:
            self.strStation = 'Amersfoort'
        elif station == STATION_DENBOSCH:
            self.strStation = 'Den Bosch'
        elif station == STATION_UTRECHT:
            self.strStation = 'Utrecht'

        # Spawn a text containing station
        canvas.create_text(
            1071.0,
            63.0,
            anchor="nw",
            text=self.strStation,
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Spawn text
        canvas.create_text(
            81.0,
            216.0,
            anchor="nw",
            text="Wat vindt de reiziger?",
            fill="#003082",
            font=("Public Sans", 40 * -1)
        )

        # Retrieve messages and spawn them on the canvas
        messageList = modules.getMessages()
        for i in range(len(messageList)):
            # Y coordinates, message, name, station
            Message.placeMessage(self, messageLocations[i], messageList[i][1], messageList[i][4], messageList[i][5], canvas)

        # Spawn the weather data
        weerbericht()


if __name__ == "__main__":
    root = tk.Tk()
    app = Opening(root)
    root.mainloop()

